server.port = 8090
server.ssl.key-store =keystore.p12
server.ssl.key-store-type =PKCS12
server.ssl.key-store-password=qlxm39
server.ssl.key-alias=spring
# 이렇게 ㅎ고 실행하면, 스프링 부트는 기본적으로 톰캣이 사용하는 connector가 하나만 등록이 된다.
# 그 connector에 SSL을 적용해준다.그래서 앞으로 모든 요청은 HTTPS를 거쳐서 하게 된다. 그래서 localhost:8080이면 bad quest지만 https://localhost:8080은 가능하다.
# 이렇게 https를 적용하면,connector가 하나인데 거기에 https를 적용했기 때문에 이제 더이상 http를 받을 수 있는 connector가 없으므로 http를 사용하지못함.
#그래서 새로운 connector를 생성해줌,이때 새로운 connector와 기존 https의 connector의 포트번호는 겹치면 안되므로 server.port= 으로 https의 포트를 8080말고 새로운걸로 교체해줌.(DemoApplication)

#HTTP2를 활성화 하려면, 기본적으로 SSL은 기본적으로 적용되어 있어야하며, server.http2.enabled=true를 추가해줘야한다.
server.http2.enabled=true 
#curl -I -k --http2 https://localhost:8090/hello 원래 이렇게 하고 터미널에 주면 HTTP2에 응답이 와야하는데 PC가 인증이 불안해서 인지 에러 뜸.


#외부 설정 파일이란? 애플리케이션에서 사용하는 여러가지 설정값들을 애플리케이션의 밖이나 안에 정의할 수 있는 기능 :application.properties:이파일은 스프링부트가 애플리케이션을 구동할 떄 자동으로 로딩하는 파일이다.
#key-value형식인 "server.port = 8090" 이런 형태로 값을 정의하면 어플리케이션에서 참조하여 사용할 수 있다.
#값을 참조할때 여러방법이있는데 @Value으로 값을 받아올수 있다. -> AppRunner.java
#random값 사용 : ${random.무엇} 으로 랜덤값을 줄 수 도 있다.
#properties에 정의해준값을 변수를 사용하듯이 그대로 사용할 수 도 있다.
#property의 우선순위: 여러 방법으로 프로퍼티를 정의하고 잇으면 우선순위가 제일 높은 방법으로 정의한 프로퍼티값이 오버라이딩 된다. : 첫번째는 Test에있는 @TestPropertySource이고 기본은 15번째밖에안됨 -> DemoApplicationTests.java

#값 참조 예제
my.name = beomkyu  
#random값
my.age = ${random.int} 
#place holder -> 이런식으로 값을 담을 수도 있음.
my.fullname = ${my.name} Kim

#application.properties의 우선순위: 1.프로젝트 config 디렉토리 아래 -> 2.target 디렉토리 아래 -> 3.src의 config 아래 -> 4.main의 resources 디렉토리 아래

#위처럼 key값이 모두 my와 같이 같은 값으로 시작할 때, 그것을 묶어서 Bean으로 등록 가능 : @ConfigurationProperties -> Myproperties.java